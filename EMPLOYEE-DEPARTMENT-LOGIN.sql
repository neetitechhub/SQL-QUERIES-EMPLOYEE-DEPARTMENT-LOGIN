/**CREATE DATABASE EMPLOYEEDB
USE EMPLOYEEDB
CREATE TABLE EMPLOYEES (
EMPLOYEEID INT PRIMARY KEY,
FIRSTNAME VARCHAR (100),
LASTNAME VARCHAR(100),
DEPARTMENT_ID INT,
HIREDATE DATE,
MANAGERID INT,
SALARY INT,
FOREIGN KEY (DEPARTMENT_ID) REFERENCES DEPARTMENTS(DEPARTMENTID)
)

CREATE TABLE DEPARTMENTS (
DEPARTMENTID INT PRIMARY KEY,
DEPARTMENTNAME VARCHAR (100)
)

CREATE TABLE EMPLOYEELOGINS(
LOGINID INT PRIMARY KEY,
EMPLOYEE_ID INT ,
LOGINTIME DATETIME,
LOGOUTTIME DATETIME,
FOREIGN KEY (EMPLOYEE_ID) REFERENCES EMPLOYEES(EMPLOYEEID)
)

INSERT INTO EMPLOYEES (EMPLOYEEID,	FIRSTNAME,	LASTNAME,	DEPARTMENT_ID,	HIREDATE) VALUES
(1,	'JOHN',	'DOE',	101,	'2021-01-15'),
(2,	'JANE',	'SMITH',	102,	'2022-05-23'),
(3,	'EMILY',	'JOHNSON',	101,	'2023-03-12')

INSERT INTO DEPARTMENTS (DEPARTMENTID,	DEPARTMENTNAME) VALUES 
(101,	'HUMAN RESOURCES'),
(102,	'ENGINEERING')

INSERT INTO EMPLOYEELOGINS (LOGINID,	EMPLOYEE_ID,	LOGINTIME,	LOGOUTTIME) VALUES
(1,	1,	'2024-08-01 08:30:00',	'2024-08-01 17:00:00'),
(2,	2,	'2024-08-01 09:00:00',	'2024-08-01 18:00:00'),
(3,	1,	'2024-08-02 08:30:00',	'2024-08-02 16:30:00'),
(4,	3,	'2024-08-02 09:00:00',	'2024-08-02 17:00:00')
**/

--LIST ALL EMPLOYEES WITH THEIR DEPARTMENT NAMES:
SELECT E.EMPLOYEEID,
       E.FIRSTNAME,
       E.LASTNAME,
       D.DEPARTMENTNAME
FROM EMPLOYEES E
    JOIN DEPARTMENTS D
        ON E.DEPARTMENT_ID = D.DEPARTMENTID;

--COUNT THE NUMBER OF EMPLOYEES IN EACH DEPARTMENT:
SELECT D.DEPARTMENTNAME,
       COUNT(E.EMPLOYEEID) AS NUMBEROFEMPLOYEES
FROM EMPLOYEES E
    JOIN DEPARTMENTS D
        ON E.DEPARTMENT_ID = D.DEPARTMENTID
GROUP BY D.DEPARTMENTNAME;

--FIND THE TOTAL NUMBER OF HOURS WORKED BY EACH EMPLOYEE ON A SPECIFIC DATE (E.G., 2024-08-01):
SELECT E.EMPLOYEEID,
       E.FIRSTNAME,
       E.LASTNAME,
       SUM(DATEDIFF(HOUR, L.LOGINTIME, L.LOGOUTTIME)) AS HOURSWORKED
FROM EMPLOYEES E
    JOIN EMPLOYEELOGINS L
        ON E.EMPLOYEEID = L.EMPLOYEE_ID
WHERE L.LOGINTIME = '2024-08-01'
GROUP BY E.EMPLOYEEID,
         E.FIRSTNAME,
         E.LASTNAME

--FIND THE FIRST AND LAST LOGIN TIME FOR EACH EMPLOYEE:

SELECT E.EMPLOYEEID,
       --E.FIRSTNAME,
       -- E.LASTNAME, 
       MIN(L.LOGINTIME) AS [FIRST LOGIN],
       MAX(L.LOGOUTTIME) AS [LAST LOGOUT]
FROM EMPLOYEES E
    JOIN EMPLOYEELOGINS L
        ON E.EMPLOYEEID = L.EMPLOYEE_ID
GROUP BY E.EMPLOYEEID;

--LIST EMPLOYEES WHO HAVE NOT LOGGED IN ON A SPECIFIC DATE (E.G., 2024-08-01):

SELECT E.EMPLOYEEID,
       E.FIRSTNAME,
       E.LASTNAME
FROM EMPLOYEES E
WHERE E.EMPLOYEEID NOT IN (
                              SELECT L.EMPLOYEE_ID
                              FROM EMPLOYEELOGINS L
                              WHERE L.LOGINTIME = '2024-08-01'
                          );

--LIST EMPLOYEES WHO HAVE NOT LOGGED IN TODAY.
SELECT E.EMPLOYEEID,
       E.FIRSTNAME,
       E.LASTNAME
FROM EMPLOYEES E
    LEFT JOIN EMPLOYEELOGINS L
        ON E.EMPLOYEEID = L.EMPLOYEE_ID
           AND CAST(L.LOGINTIME AS DATE) = CAST(GETDATE() AS DATE)
WHERE L.LOGINID IS NULL;

--FIND THE AVERAGE WORK DURATION PER EMPLOYEE FOR A GIVEN DATE (E.G., 2024-08-01).
SELECT E.EMPLOYEEID,
       E.FIRSTNAME,
       E.LASTNAME,
       AVG(DATEDIFF(MINUTE, L.LOGINTIME, L.LOGOUTTIME)) AS AVERAGEWORKDURATION
FROM EMPLOYEES E
    JOIN EMPLOYEELOGINS L
        ON E.EMPLOYEEID = L.EMPLOYEE_ID
WHERE CAST(L.LOGINTIME AS DATE) = '2024-08-01'
GROUP BY E.EMPLOYEEID,
         E.FIRSTNAME,
         E.LASTNAME;

--FIND THE EMPLOYEE WITH THE EARLIEST LOGIN TIME TODAY. 
SELECT TOP 1
    E.EMPLOYEEID,
    E.FIRSTNAME,
    E.LASTNAME,
    L.LOGINTIME
FROM EMPLOYEES E
    JOIN EMPLOYEELOGINS L
        ON E.EMPLOYEEID = L.EMPLOYEE_ID
WHERE CAST(L.LOGINTIME AS DATE) = CAST(GETDATE() AS DATE)
ORDER BY L.LOGINTIME ASC;

--GET THE TOTAL LOGIN COUNT FOR EACH EMPLOYEE. 
SELECT E.EMPLOYEEID,
       E.FIRSTNAME,
       E.LASTNAME,
       COUNT(L.LOGINID) AS LOGINCOUNT
FROM EMPLOYEES E
    JOIN EMPLOYEELOGINS L
        ON E.EMPLOYEEID = L.EMPLOYEE_ID
GROUP BY E.EMPLOYEEID,
         E.FIRSTNAME,
         E.LASTNAME;

--FIND ALL EMPLOYEES WHO HAVE LOGGED MORE THAN 8 HOURS IN A DAY. 
SELECT E.EMPLOYEEID,
       E.FIRSTNAME,
       E.LASTNAME,
       CAST(L.LOGINTIME AS DATE) AS WORKDATE,
       DATEDIFF(HOUR, L.LOGINTIME, L.LOGOUTTIME) AS HOURSWORKED
FROM EMPLOYEES E
    JOIN EMPLOYEELOGINS L
        ON E.EMPLOYEEID = L.EMPLOYEE_ID
WHERE DATEDIFF(HOUR, L.LOGINTIME, L.LOGOUTTIME) > 8;

--LIST ALL DEPARTMENTS THAT HAVE MORE THAN ONE EMPLOYEE.
SELECT D.DEPARTMENTID,
       D.DEPARTMENTNAME,
       COUNT(E.EMPLOYEEID) AS EMPLOYEECOUNT
FROM EMPLOYEES E
    JOIN DEPARTMENTS D
        ON E.DEPARTMENT_ID = D.DEPARTMENTID
GROUP BY D.DEPARTMENTID,
         D.DEPARTMENTNAME
HAVING COUNT(E.EMPLOYEEID) > 1;

--FIND THE MOST RECENT HIRE IN EACH DEPARTMENT.
SELECT D.DEPARTMENTNAME,
       E.FIRSTNAME,
       E.LASTNAME,
       E.HIREDATE
FROM EMPLOYEES E
    JOIN DEPARTMENTS D
        ON E.DEPARTMENT_ID = D.DEPARTMENTID
WHERE E.HIREDATE =
(
    SELECT MAX(E2.HIREDATE)
    FROM EMPLOYEES E2
    WHERE E2.DEPARTMENT_ID = E.DEPARTMENT_ID
);
--GET THE NAMES OF EMPLOYEES WHO HAVE LOGGED IN EVERY DAY FOR THE PAST WEEK. 
SELECT E.EMPLOYEEID,
       E.FIRSTNAME,
       E.LASTNAME
FROM EMPLOYEES E
    JOIN EMPLOYEELOGINS L
        ON E.EMPLOYEEID = L.EMPLOYEE_ID
WHERE L.LOGINTIME >= DATEADD(DAY, -7, GETDATE())
GROUP BY E.EMPLOYEEID,
         E.FIRSTNAME,
         E.LASTNAME
HAVING COUNT(DISTINCT CAST(L.LOGINTIME AS DATE)) = 7;

--FIND EMPLOYEES WHO HAVE WORKED LESS THAN 4 HOURS ON ANY DAY. 
SELECT E.EMPLOYEEID,
       E.FIRSTNAME,
       E.LASTNAME,
       CAST(L.LOGINTIME AS DATE) AS WORKDATE,
       DATEDIFF(HOUR, L.LOGINTIME, L.LOGOUTTIME) AS HOURSWORKED
FROM EMPLOYEES E
    JOIN EMPLOYEELOGINS L
        ON E.EMPLOYEEID = L.EMPLOYEE_ID
WHERE DATEDIFF(HOUR, L.LOGINTIME, L.LOGOUTTIME) < 4;

--LIST EMPLOYEES ALONG WITH THEIR TOTAL WORKING HOURS FOR THE CURRENT MONTH.
SELECT E.EMPLOYEEID,
       E.FIRSTNAME,
       E.LASTNAME,
       SUM(DATEDIFF(HOUR, L.LOGINTIME, L.LOGOUTTIME)) AS TOTALHOURSWORKED
FROM EMPLOYEES E
    JOIN EMPLOYEELOGINS L
        ON E.EMPLOYEEID = L.EMPLOYEE_ID
WHERE MONTH(L.LOGINTIME) = MONTH(GETDATE())
      AND YEAR(L.LOGINTIME) = YEAR(GETDATE())
GROUP BY E.EMPLOYEEID,
         E.FIRSTNAME,
         E.LASTNAME;

--FIND THE DEPARTMENT WITH THE HIGHEST TOTAL NUMBER OF LOGIN HOURS.
SELECT D.DEPARTMENTNAME,
       SUM(DATEDIFF(HOUR, L.LOGINTIME, L.LOGOUTTIME)) AS TOTALLOGINHOURS
FROM EMPLOYEES E
    JOIN DEPARTMENTS D
        ON E.DEPARTMENT_ID = D.DEPARTMENTID
    JOIN EMPLOYEELOGINS L
        ON E.EMPLOYEEID = L.EMPLOYEE_ID
GROUP BY D.DEPARTMENTNAME
ORDER BY TOTALLOGINHOURS DESC;

--GET A LIST OF ALL EMPLOYEES HIRED IN THE LAST 6 MONTHS.
SELECT E.EMPLOYEEID,
       E.FIRSTNAME,
       E.LASTNAME,
       E.HIREDATE,
       D.DEPARTMENTNAME
FROM EMPLOYEES E
    JOIN DEPARTMENTS D
        ON E.DEPARTMENT_ID = D.DEPARTMENTID
WHERE E.HIREDATE >= DATEADD(MONTH, -6, GETDATE());

--FIND ALL EMPLOYEES IN THE HUMAN RESOURCES DEPARTMENT

SELECT *
FROM EMPLOYEES
WHERE DEPARTMENT_ID =
(
    SELECT DEPARTMENTID
    FROM DEPARTMENTS
    WHERE DEPARTMENTNAME = 'HUMAN RESOURCES'
);

--COUNT THE NUMBER OF EMPLOYEES IN EACH DEPARTMENT
SELECT DEPARTMENT_ID,
       COUNT(*) AS EMPLOYEECOUNT
FROM EMPLOYEES
GROUP BY DEPARTMENT_ID;
--FIND THE TOTAL SALARY PAID TO EMPLOYEES IN EACH DEPARTMENT
SELECT DEPARTMENT_ID,
       SUM(SALARY) AS TOTALSALARY
FROM EMPLOYEES
GROUP BY DEPARTMENT_ID;

--FIND EMPLOYEES HIRED IN THE LAST 1 YEAR

SELECT *
FROM EMPLOYEES
WHERE HIREDATE >= DATEADD(YEAR, -1, GETDATE());

--FIND THE HIGHEST-PAID EMPLOYEE IN EACH DEPARTMENT

SELECT E.EMPLOYEEID,
       E.FIRSTNAME,
       E.LASTNAME,
       E.DEPARTMENT_ID,
       E.SALARY
FROM EMPLOYEES E
    INNER JOIN
    (
        SELECT DEPARTMENT_ID,
               MAX(SALARY) AS MAXSALARY
        FROM EMPLOYEES
        GROUP BY DEPARTMENT_ID
    ) MAXSALARIES
        ON E.DEPARTMENT_ID = MAXSALARIES.DEPARTMENT_ID
           AND E.SALARY = MAXSALARIES.MAXSALARY;


--FIND THE AVERAGE SALARY OF EMPLOYEES

SELECT AVG(SALARY) AS AVERAGESALARY
FROM EMPLOYEES;

--FIND EMPLOYEES WITH A SALARY GREATER THAN THE AVERAGE SALARY

SELECT *
FROM EMPLOYEES
WHERE SALARY >
(
    SELECT AVG(SALARY) FROM EMPLOYEES
);

--LIST EMPLOYEES ALONG WITH THEIR DEPARTMENT NAMES

SELECT E.EMPLOYEEID,
       E.FIRSTNAME,
       E.LASTNAME,
       D.DEPARTMENTNAME
FROM EMPLOYEES E
    INNER JOIN DEPARTMENTS D
        ON E.DEPARTMENT_ID = D.DEPARTMENTID;

--FIND THE TOTAL NUMBER OF EMPLOYEES
SELECT COUNT(*) AS TOTALEMPLOYEES
FROM EMPLOYEES;

--FIND THE EMPLOYEE WITH THE EARLIEST HIRE DATE

SELECT TOP 1
    *
FROM EMPLOYEES
ORDER BY HIREDATE ASC;

--FIND DEPARTMENTS WITH MORE THAN 1 EMPLOYEE

SELECT DEPARTMENT_ID,
       COUNT(*) AS EMPLOYEECOUNT
FROM EMPLOYEES
GROUP BY DEPARTMENT_ID
HAVING COUNT(*) > 1;

--LIST ALL EMPLOYEES HIRED IN 2021

SELECT *
FROM EMPLOYEES
WHERE YEAR(HIREDATE) = 2021;

--FIND THE NUMBER OF EMPLOYEES IN EACH DEPARTMENT, INCLUDING DEPARTMENTS WITH NO EMPLOYEES

SELECT D.DEPARTMENTID,
       D.DEPARTMENTNAME,
       COUNT(E.EMPLOYEEID) AS EMPLOYEECOUNT
FROM DEPARTMENTS D
    LEFT JOIN EMPLOYEES E
        ON D.DEPARTMENTID = E.DEPARTMENT_ID
GROUP BY D.DEPARTMENTID,
         D.DEPARTMENTNAME;

--FIND EMPLOYEES WHOSE SALARY IS GREATER THAN THEIR MANAGERS' SALARY DEPARTMENT-WISE
SELECT E.FIRSTNAME AS EMPLOYEENAME,
       E.SALARY AS EMPLOYEESALARY,
       M.FIRSTNAME AS MANAGERNAME,
       M.SALARY AS MANAGERSALARY,
       E.DEPARTMENT_ID
FROM EMPLOYEES E
    JOIN EMPLOYEES M
        ON E.MANAGERID = M.EMPLOYEEID
WHERE E.SALARY > M.SALARY
ORDER BY E.DEPARTMENT_ID,
         E.SALARY DESC;
--FIND THE SECOND-HIGHEST SALARY FOR EACH DEPARTMENT 
WITH RANKEDSALARIES
AS (SELECT DEPARTMENT_ID,
           EMPLOYEEID,
           SALARY,
           ROW_NUMBER() OVER (PARTITION BY DEPARTMENT_ID ORDER BY SALARY DESC) AS RANK
    FROM EMPLOYEES
   )
SELECT DEPARTMENT_ID,
       EMPLOYEEID,
       SALARY
FROM RANKEDSALARIES
WHERE RANK = 2;

--TO FIND EMPLOYEES WHOSE SALARIES ARE GREATER THAN THEIR MANAGERS' SALARIES WITHIN EACH DEPARTMENT
SELECT E.FIRSTNAME,
       E.SALARY,
       D.DEPARTMENTNAME
FROM EMPLOYEES E
    JOIN EMPLOYEES M
        ON E.MANAGERID = M.EMPLOYEEID
    JOIN DEPARTMENTS D
        ON E.DEPARTMENT_ID = D.DEPARTMENTID
WHERE E.SALARY > M.SALARY;
